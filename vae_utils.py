import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import numpy.linalg as la
import sklearn.preprocessing as sp
from cycler import cycler

from sklearn.manifold import TSNE
from sklearn.decomposition import PCA


def visualize_mnist(data_loader, num_rows=2, num_cols=5):
    """Plot random images from the MNIST dataset.

    Args:
        data_loader: Data loader for the MNIST dataset.

    Based on https://medium.com/@mrdatascience/how-to-plot-mnist-digits-using-matplotlib-65a2e0cc068
    """
    sns.set_style('white')
    num_total = num_rows * num_cols
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(1.5 * num_cols, 2 * num_rows))
    for i in range(num_total):
        ax = axes[i // num_cols, i % num_cols]
        idx = np.random.randint(len(data_loader.dataset))
        x = data_loader.dataset[idx][0].view(28, 28).cpu().numpy()
        y = data_loader.dataset[idx][1]
        ax.imshow(x, cmap='gray', vmin=0.0, vmax=1.0)
        ax.set_title(f'Class: {y}')
    plt.tight_layout()
    plt.show()


def visualize_vae_samples(x, y, x_sample, y_sample):
    """Plot random samples generated by the VAE.

    Args:
        samples: Samples drawn from the model, shape [num_samples, 28, 28]

    """
    sns.set_style('whitegrid')
    tsne_sample = TSNE(init='pca')
    plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#FF0000", "#005F0E", "#072480", "#55025B", "#616061"])

    x_mixed_data = np.concatenate((x.cpu().numpy(), x_sample), axis=0)
    y_mixed_data = np.concatenate((y.cpu().numpy(), y_sample), axis=0)
    emb_all = tsne_sample.fit_transform(x_mixed_data)

    plt.figure(figsize=[10, 7])

    for i in np.unique(y_mixed_data):
        class_ind = np.where(y_mixed_data == i)
        plt.scatter(emb_all[class_ind, 0], emb_all[class_ind, 1], label=f'{i}', alpha=0.6, marker='o', s=20)

    plt.xlabel('t-SNE component 1')
    plt.ylabel('t-SNE component 2')


def visualize_embeddings(vae, x, y):
    sns.set_style('whitegrid')
    tsne = TSNE(init='pca')
    plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#FF0000", "#005F0E", "#072480", "#55025B", "#FE7878", "#89FA82"
                                                        , "#828FFA", "#F38BD8", "#616061"])
    # Obtain embeddings using VAE
    means = vae.encoder(x)[0].cpu().detach().numpy()

    variances = vae.encoder(x)[1].cpu().detach().numpy()
    # scale_var = sp.MinMaxScaler(feature_range=[0, 900])
    # vars_scaled = scale_var.fit_transform(variances)
    vars_norm = la.norm(variances, axis=1)
    print(f'Max Variance Norm {np.amax(vars_norm)}')
    print(f'Min Variance Norm {np.amin(vars_norm)}')

    # Dimensionality reduction on the embeddings using t-SNE
    emb = tsne.fit_transform(means)

    plt.figure(figsize=[10, 7])
    labels = y.cpu().numpy()
    for i in np.unique(labels):
        class_ind = np.where(labels == i)
        matches = class_ind[0]
        plt.scatter(emb[class_ind, 0], emb[class_ind, 1], label=f'{i}', alpha=1, marker='X', s=5)
        # for n in range(0, matches.shape[0]):
        #     if i == 0:
        #         plt.scatter(emb[matches[n], 0], emb[matches[n], 1], label=f'{i}', alpha=0.2, marker='o',
        #                     s=vars_sample[n], c='C0')
        #     elif i == 1:
        #         plt.scatter(emb[matches[n], 0], emb[matches[n], 1], label=f'{i}', alpha=0.2, marker='o',
        #                     s=vars_sample[n], c='C1')
        #     elif i == 2:
        #         plt.scatter(emb[matches[n], 0], emb[matches[n], 1], label=f'{i}', alpha=0.2, marker='o',
        #                     s=vars_sample[n], c='C2')
        #     elif i == 3:
        #         plt.scatter(emb[matches[n], 0], emb[matches[n], 1], label=f'{i}', alpha=0.2, marker='o',
        #                     s=vars_sample[n], c='C3')
        #     else:
        #         pass

    plt.xlabel('t-SNE component 1')
    plt.ylabel('t-SNE component 2')


def visualize_all(x, y, x_recon, y_recon, x_sample, y_sample):
    sns.set_style('whitegrid')
    tsne_all = TSNE(init='pca')
    plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#FF0000", "#005F0E", "#072480", "#55025B", "#FE7878", "#89FA82"
                                                        , "#828FFA", "#F38BD8", "#616061"])

    x_mixed_data = np.concatenate((x.cpu().numpy(), x_recon.cpu().numpy(), x_sample), axis=0)
    y_mixed_data = np.concatenate((y.cpu().numpy(), y_recon.cpu().numpy(), y_sample), axis=0)
    emb_all = tsne_all.fit_transform(x_mixed_data)

    plt.figure(figsize=[10, 7])

    for i in np.unique(y_mixed_data):
        class_ind = np.where(y_mixed_data == i)
        plt.scatter(emb_all[class_ind, 0], emb_all[class_ind, 1], label=f'{i}', alpha=0.6, marker='o', s=20)

    plt.xlabel('t-SNE component 1')
    plt.ylabel('t-SNE component 2')


def visualize_dummy_samples(x, y):
    sns.set_style('whitegrid')
    tsne_d = TSNE(init='pca')
    plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#FF0000", "#005F0E", "#072480", "#55025B", "#FE7878", "#89FA82"
                                                        , "#828FFA", "#F38BD8", "#616061"])
    # Dimensionality reduction on the embeddings using t-SNE
    emb_d = tsne_d.fit_transform(x)

    plt.figure(figsize=[10, 7])
    labels = y.cpu().numpy()
    for i in np.unique(labels):
        class_ind = np.where(labels == i)
        plt.scatter(emb_d[class_ind, 0], emb_d[class_ind, 1], label=f'{i}', alpha=0.5, s=5)
        # plt.legend()
    plt.xlabel('t-SNE component 1')
    plt.ylabel('t-SNE component 2')